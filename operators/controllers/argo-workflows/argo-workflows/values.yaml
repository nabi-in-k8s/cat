cert:
  enabled: true
  secretName: "argo-workflows-tls"
  issuer:
    name: "letsencrypt-prod"
    kind: "ClusterIssuer"
  dnsNames:
    - argo-workflows.k8s.nabi.kim

argo-workflows:
  enabled: true

  useStaticCredentials: true

  workflow:
    serviceAccount:
      create: true
      name: "default"
    rbac:
      create: true

  server:
    secure: false

    autoScaling:
      enabled: false

    extraArgs:
      - --auth-mode=sso

    sso:
      enabled: true
      issuer: https://argocd.k8s.nabi.kim/api/dex
      sessionExpiry: 24h
      clientId:
        name: argo-workflows-sso
        key: client-id
      clientSecret:
        name: argo-workflows-sso
        key: client-secret
      redirectUrl: https://argo-workflows.k8s.nabi.kim/oauth2/callback
      rbac:
        enabled: true
      scopes:
        - groups
        - email

    ingress:
      enabled: true

      ingressClassName: nginx

      hosts:
        - argo-workflows.k8s.nabi.kim

      paths:
        - /

      tls:
        - secretName: argo-workflows-tls
          hosts:
            - argo-workflows.k8s.nabi.kim

  extraObjects:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: argo-workflows-sso
        namespace: argo-workflows
      data:
        # echo -n 'argo-workflows-sso' | base64
        client-id: YXJnby13b3JrZmxvd3Mtc3Nv
        # echo -n 'NABI-ARGO-WORKFLOWS-SECRET' | base64
        client-secret: YXJnby13b3JrZmxvd3Mtc3Nv
    - apiVersion: v1
      kind: Secret
      metadata:
        name: argo-workflows-sso
        namespace: argocd
      data:
        # echo -n 'argo-workflows-sso' | base64
        client-id: YXJnby13b3JrZmxvd3Mtc3Nv
        # echo -n 'NABI-ARGO-WORKFLOWS-SECRET' | base64
        client-secret: YXJnby13b3JrZmxvd3Mtc3Nv
